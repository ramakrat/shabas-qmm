// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// ================ OBJECT MODELS ================

model Client {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    name           String
    street_address String
    city           String
    state          String
    country        String
    zip_code       String
    description    String

    sites       Site[]
    pocs        Poc[]
    engagements Engagement[]
}

model Site {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    description    String
    name           String
    street_address String
    city           String
    state          String
    country        String
    zip_code       String

    client_id Int
    client    Client  @relation(fields: [client_id], references: [id])
    filter    Filter?

    pocs             Poc[]
    ratings          Rating[]
    interview_guides InterviewGuide[]
    assessments      Assessment[]

    @@index([client_id])
}

model Poc {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    first_name   String
    last_name    String
    title        String
    mobile_phone String
    work_phone   String
    email        String

    user_id       Int?
    user          User?       @relation(fields: [user_id], references: [id])
    client_id     Int?
    client        Client?     @relation(fields: [client_id], references: [id])
    engagement_id Int?
    engagement    Engagement? @relation(fields: [engagement_id], references: [id])
    site_id       Int?
    site          Site?       @relation(fields: [site_id], references: [id])

    engagement_pocs EngagementPoc[]
    assessments     Assessment[]

    @@index([user_id])
    @@index([client_id])
    @@index([engagement_id])
    @@index([site_id])
}

model Question {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    active        Boolean
    number        String  @unique
    question      String
    pillar        String
    practice_area String
    topic_area    String
    hint          String
    priority      String

    references           Reference[]
    smes                 Sme[]
    interview_guides     InterviewGuide[]
    assessment_questions AssessmentQuestion[]
    ratings              Rating[]
    changelogs           Changelog[]
}

model Rating {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    active                Boolean
    level_number          String
    criteria              String
    progression_statement String

    question_id Int
    question    Question @relation(fields: [question_id], references: [id])
    site_id     Int?
    site        Site?    @relation(fields: [site_id], references: [id])
    filter_id   Int?
    filter      Filter?  @relation(fields: [filter_id], references: [id])

    @@index([question_id])
    @@index([site_id])
    @@index([filter_id])
}

model Reference {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    citation String

    question_id Int
    question    Question @relation(fields: [question_id], references: [id])

    @@index([question_id])
}

model Sme {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    first_name   String
    last_name    String
    mobile_phone String
    email        String

    question_id Int
    question    Question @relation(fields: [question_id], references: [id])

    @@index([question_id])
}

model InterviewGuide {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    active             Boolean
    interview_question String

    question_id Int
    question    Question @relation(fields: [question_id], references: [id])
    site_id     Int
    site        Site     @relation(fields: [site_id], references: [id])
    filter_id   Int
    filter      Filter   @relation(fields: [filter_id], references: [id])

    @@index([question_id])
    @@index([site_id])
    @@index([filter_id])
}

model Filter {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    type String
    name String

    site_id Int?  @unique
    site    Site? @relation(fields: [site_id], references: [id])

    ratings              Rating[]
    interview_guides     InterviewGuide[]
    assessment_questions AssessmentQuestion[]

    @@index([site_id])
}

model Engagement {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    description String
    status      String
    start_date  DateTime
    end_date    DateTime

    client_id Int
    client    Client @relation(fields: [client_id], references: [id])

    pocs            Poc[]
    assessments     Assessment[]
    engagement_pocs EngagementPoc[]

    @@index([client_id])
}

model EngagementPoc {
    id Int @id @default(autoincrement())

    engagement_id Int
    engagement    Engagement @relation(fields: [engagement_id], references: [id])
    poc_id        Int
    poc           Poc        @relation(fields: [poc_id], references: [id])

    @@index([poc_id])
    @@index([engagement_id])
    @@map("EngagementPoc")
}

model Assessment {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    description String
    status      String
    start_date  DateTime
    end_date    DateTime

    poc_id        Int?
    poc           Poc?       @relation(fields: [poc_id], references: [id])
    site_id       Int
    site          Site       @relation(fields: [site_id], references: [id])
    engagement_id Int
    engagement    Engagement @relation(fields: [engagement_id], references: [id])

    assessment_users     AssessmentUser[]
    assessment_questions AssessmentQuestion[]

    @@index([site_id])
    @@index([engagement_id])
    @@index([poc_id])
}

model AssessmentUser {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    user_id       Int
    user          User       @relation(fields: [user_id], references: [id])
    assessment_id Int
    assessment    Assessment @relation(fields: [assessment_id], references: [id])

    @@index([user_id])
    @@index([assessment_id])
}

model AssessmentQuestion {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    question_id   Int
    question      Question   @relation(fields: [question_id], references: [id])
    assessment_id Int
    assessment    Assessment @relation(fields: [assessment_id], references: [id])
    filter_id     Int?
    filter        Filter?    @relation(fields: [filter_id], references: [id])
    answer        Answer?

    changelogs Changelog[]

    @@index([question_id])
    @@index([assessment_id])
    @@index([filter_id])
}

model Answer {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    assessor_rating      String?
    assessor_explanation String?
    assessor_evidence    String?

    consensus_rating      String?
    consensus_explanation String?
    consensus_evidence    String?

    oversight_concurrence String?
    oversight_explanation String?
    oversight_evidence    String?

    client_concurrence String?
    client_explanation String?
    client_evidence    String?

    user_id                Int?
    user                   User?              @relation(fields: [user_id], references: [id])
    assessment_question_id Int                @unique
    assessment_question    AssessmentQuestion @relation(fields: [assessment_question_id], references: [id])

    start_times StartTime[]

    @@index([user_id])
    @@index([assessment_question_id])
}

model StartTime {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    time DateTime

    answer_id Int
    answer    Answer @relation(fields: [answer_id], references: [id])

    @@index([answer_id])
}

model Changelog {
    id Int @id @default(autoincrement())

    field        String
    former_value String?
    new_value    String?

    updated_at DateTime @default(now())
    updated_by String?

    question_id Int?
    question    Question? @relation(fields: [question_id], references: [id])

    assessment_question_id Int?
    assessment_question    AssessmentQuestion? @relation(fields: [assessment_question_id], references: [id])

    @@index([question_id])
    @@index([assessment_question_id])
}

// ================ AUTHENTICATION ================

// Necessary for Next auth

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user_id           Int
    user              User    @relation(fields: [user_id], references: [id])

    @@unique([provider, providerAccountId])
    @@index([user_id])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user_id      Int
    user         User     @relation(fields: [user_id], references: [id])

    @@index([user_id])
}

model User {
    id              Int              @id @default(autoincrement())
    first_name      String
    last_name       String
    email           String           @unique
    emailVerified   DateTime
    accounts        Account[]
    sessions        Session[]
    POC             Poc[]
    Assessment_User AssessmentUser[]
    Answer          Answer[]

    role Role @default(ASSESSOR)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    ADMIN
    LEAD_ASSESSOR
    ASSESSOR
}
