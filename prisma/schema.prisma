// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// ================ OBJECT MODELS ================

model Client {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    name           String
    street_address String
    city           String
    state          String
    country        String
    zip_code       String
    description    String @db.MediumText

    sites       Site[]
    pocs        Poc[]
    engagements Engagement[]
}

model Site {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    description    String @db.MediumText
    name           String
    street_address String
    city           String
    state          String
    country        String
    zip_code       String

    client_id Int
    client    Client  @relation(fields: [client_id], references: [id], onDelete: Restrict)
    filter    Filter?

    pocs             Poc[]
    assessments      Assessment[]

    @@index([client_id])
}

model Poc {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    first_name   String
    last_name    String
    title        String
    mobile_phone String
    work_phone   String
    email        String

    user_id       Int?
    user          User?       @relation(fields: [user_id], references: [id], onDelete: Restrict)
    client_id     Int?
    client        Client?     @relation(fields: [client_id], references: [id], onDelete: Restrict)
    engagement_id Int?
    engagement    Engagement? @relation(fields: [engagement_id], references: [id], onDelete: Restrict)
    site_id       Int?
    site          Site?       @relation(fields: [site_id], references: [id], onDelete: Restrict)

    engagement_pocs EngagementPoc[]
    assessments     Assessment[]

    @@index([user_id])
    @@index([client_id])
    @@index([engagement_id])
    @@index([site_id])
}

model Question {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    active        Boolean
    number        String  @unique
    question      String
    pillar        String
    practice_area String
    topic_area    String
    hint          String
    priority      String

    smeId Int?
    sme   Sme?

    ratings              Rating[]
    references           Reference[]
    interview_guides     InterviewGuide[]
    assessment_questions AssessmentQuestion[]
    changelogs           Changelog[]
}

model Rating {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    criteria_1              String
    progression_statement_1 String
    criteria_2              String
    progression_statement_2 String
    criteria_3              String
    progression_statement_3 String
    criteria_4              String
    progression_statement_4 String
    criteria_5              String

    question_id Int
    question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
    filter_id   Int?
    filter      Filter?  @relation(fields: [filter_id], references: [id], onDelete: Restrict)

    @@index([question_id])
    @@index([filter_id])
}

model Reference {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    citation String

    question_id Int
    question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)

    @@index([question_id])
}

model Sme {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    first_name   String
    last_name    String
    mobile_phone String
    email        String

    question_id Int      @unique
    question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)

    @@index([question_id])
}

model InterviewGuide {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    active             Boolean
    interview_question String

    question_id Int
    question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
    filter_id   Int
    filter      Filter   @relation(fields: [filter_id], references: [id], onDelete: Restrict)

    @@index([question_id])
    @@index([filter_id])
}

model Filter {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    type String
    name String

    site_id Int?  @unique
    site    Site? @relation(fields: [site_id], references: [id], onDelete: Restrict)

    ratings              Rating[]
    interview_guides     InterviewGuide[]
    assessment_questions AssessmentQuestion[]

    @@index([site_id])
}

model Engagement {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    description String   @db.MediumText
    status      String
    start_date  DateTime
    end_date    DateTime

    client_id Int
    client    Client @relation(fields: [client_id], references: [id], onDelete: Restrict)

    pocs            Poc[]
    assessments     Assessment[]
    engagement_pocs EngagementPoc[]

    @@index([client_id])
}

model EngagementPoc {
    id Int @id @default(autoincrement())

    engagement_id Int
    engagement    Engagement @relation(fields: [engagement_id], references: [id], onDelete: Restrict)
    poc_id        Int
    poc           Poc        @relation(fields: [poc_id], references: [id], onDelete: Restrict)

    @@index([poc_id])
    @@index([engagement_id])
}

model Assessment {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    description String   @db.MediumText
    status      String
    start_date  DateTime
    end_date    DateTime

    poc_id        Int?
    poc           Poc?       @relation(fields: [poc_id], references: [id], onDelete: Restrict)
    site_id       Int
    site          Site       @relation(fields: [site_id], references: [id], onDelete: Restrict)
    engagement_id Int
    engagement    Engagement @relation(fields: [engagement_id], references: [id], onDelete: Restrict)

    assessment_users     AssessmentUser[]
    assessment_questions AssessmentQuestion[]

    @@index([site_id])
    @@index([engagement_id])
    @@index([poc_id])
}

model AssessmentUser {
    id Int @id @default(autoincrement())

    user_id       Int
    user          User       @relation(fields: [user_id], references: [id], onDelete: Restrict)
    assessment_id Int
    assessment    Assessment @relation(fields: [assessment_id], references: [id], onDelete: Cascade)

    @@index([user_id])
    @@index([assessment_id])
}

model AssessmentQuestion {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    question_id   Int
    question      Question   @relation(fields: [question_id], references: [id], onDelete: Cascade)
    assessment_id Int
    assessment    Assessment @relation(fields: [assessment_id], references: [id], onDelete: Cascade)
    filter_id     Int?
    filter        Filter?    @relation(fields: [filter_id], references: [id], onDelete: Restrict)
    answers       Answer[]

    @@index([question_id])
    @@index([assessment_id])
    @@index([filter_id])
}

model Answer {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    created_by String
    updated_by String

    status    String?
    rating    String?
    rationale String?
    notes     String? // Ongoing Notes, Review Improvement Suggestions, Oversight Comments

    user_id                Int?
    user                   User?              @relation(fields: [user_id], references: [id])
    assessment_question_id Int
    assessment_question    AssessmentQuestion @relation(fields: [assessment_question_id], references: [id])

    start_time DateTime?

    changelogs Changelog[]

    @@index([user_id])
    @@index([assessment_question_id])
}

model Changelog {
    id Int @id @default(autoincrement())

    field        String
    former_value String?
    new_value    String?

    updated_at DateTime @default(now())
    updated_by String?

    question_id Int?
    question    Question? @relation(fields: [question_id], references: [id])

    answer_id Int?
    answer    Answer? @relation(fields: [answer_id], references: [id])

    @@index([question_id])
    @@index([answer_id])
}

// ================ AUTHENTICATION ================

// Necessary for Next auth

// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user_id           Int
//     user              User    @relation(fields: [user_id], references: [id])

//     @@unique([provider, providerAccountId])
//     @@index([user_id])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user_id      Int
//     user         User     @relation(fields: [user_id], references: [id])

//     @@index([user_id])
// }

// model User {
//     id              Int              @id @default(autoincrement())
//     first_name      String
//     last_name       String
//     email           String           @unique
//     emailVerified   DateTime
//     accounts        Account[]
//     sessions        Session[]
//     POC             Poc[]
//     Assessment_User AssessmentUser[]
//     Answer          Answer[]

//     role Role @default(ASSESSOR)
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }

enum Role {
    ADMIN
    ASSESSOR
    LEAD_ASSESSOR
    OVERSIGHT_ASSESSOR
}

model User {
    id         Int      @id @default(autoincrement())
    first_name String
    last_name  String
    email      String   @unique
    password   String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    role             Role             @default(ASSESSOR)
    sessions         Session[]
    pocs             Poc[]
    assessment_users AssessmentUser[]
    answers          Answer[]
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}
